# 5. report_generator.py

import os
import base64
from datetime import datetime
import pandas as pd # To handle stats if passed as a DataFrame

"""
Generates an HTML report summarizing FASTQ analysis results, including
summary statistics tables and embedded visualizations.
"""

def generate_html_report(summary_stats, plot_paths, output_filename="fastq_analysis_report.html"):
    """
    Generates an HTML report from summary statistics and plot file paths.

    Args:
        summary_stats (dict or pandas.DataFrame): A dictionary or DataFrame containing
                                                   key-value pairs/rows of summary statistics.
                                                   Keys/Index should be statistic names,
                                                   Values should be the corresponding values.
                                                   It's recommended to flatten nested stats
                                                   from quality_analyzer into this structure.
        plot_paths (dict): A dictionary where keys are plot titles (str) and
                           values are file paths (str) to the saved plot image files
                           (e.g., generated by visualizer.py).
        output_filename (str): The name (including path) for the output HTML file.

    Returns:
        str: The path to the generated HTML file, or None if an error occurred.
    """
    print(f"Generating HTML report: {output_filename}...")

    # --- HTML Structure ---
    html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FASTQ Analysis Report</title>
    <style>
        body {{ font-family: sans-serif; line-height: 1.6; margin: 20px; background-color: #fdfdfd; color: #333; }}
        .container {{ max-width: 960px; margin: auto; background-color: #fff; padding: 25px; box-shadow: 0 0 10px rgba(0,0,0,0.05); border-radius: 5px; }}
        h1 {{ color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; }}
        h2 {{ color: #3498db; margin-top: 30px; border-bottom: 1px solid #eee; padding-bottom: 5px; }}
        h3 {{ color: #2980b9; margin-top: 20px; }}
        table {{ width: 100%; border-collapse: collapse; margin-bottom: 20px; font-size: 0.9em; }}
        th, td {{ border: 1px solid #ddd; padding: 10px; text-align: left; }}
        th {{ background-color: #ecf0f1; color: #34495e; font-weight: bold; }}
        tr:nth-child(even) {{ background-color: #f9f9f9; }}
        .plot-container {{ margin-bottom: 30px; padding: 15px; border: 1px solid #eee; box-shadow: 2px 2px 5px rgba(0,0,0,0.07); border-radius: 4px; overflow-x: auto; }}
        .plot-container img {{ max-width: 100%; height: auto; display: block; margin: 10px auto; }}
        .footer {{ margin-top: 40px; font-size: 0.85em; color: #777; text-align: center; border-top: 1px solid #eee; padding-top: 15px; }}
        .code {{ background-color: #eee; padding: 2px 4px; font-family: monospace; border-radius: 3px; }}
        .error {{ color: #c0392b; font-weight: bold; }}
        .warning {{ color: #f39c12; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>FASTQ Analysis Report</h1>
        <p>Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>

        <h2>Summary Statistics</h2>
"""

    # --- Add Summary Statistics Table ---
    if isinstance(summary_stats, pd.DataFrame):
        # Use DataFrame's to_html method for nice formatting
        try:
             # Escape=False allows HTML in DataFrame cells if needed, but be cautious
            html_content += summary_stats.to_html(classes='stats-table', border=1, escape=False)
        except Exception as e:
            html_content += f'<p class="error">Error rendering DataFrame to HTML: {e}</p>'
            print(f"Error rendering DataFrame to HTML: {e}")
    elif isinstance(summary_stats, dict):
        # Build table manually for dictionary input
        html_content += """
        <table class="stats-table">
            <thead>
                <tr><th>Metric</th><th>Value</th></tr>
            </thead>
            <tbody>
        """
        for key, value in summary_stats.items():
            # Basic formatting for numbers
            value_str = f"{value:,.2f}" if isinstance(value, float) else \
                        f"{value:,}" if isinstance(value, int) else \
                        str(value)
            html_content += f"            <tr><td>{key}</td><td>{value_str}</td></tr>\n"
        html_content += """
            </tbody>
        </table>
        """
    else:
        html_content += '<p class="error">Error: Summary statistics format not recognized (expected dict or pandas.DataFrame).</p>'
        print("Error: Summary statistics format not recognized.")


    # --- Add Visualizations ---
    html_content += "\n        <h2>Visualizations</h2>\n"

    if not plot_paths:
        html_content += '<p class="warning">No plot paths provided.</p>\n'
        print("Warning: No plot paths provided for the report.")
    else:
        for title, img_path in plot_paths.items():
            html_content += f'        <div class="plot-container">\n'
            html_content += f'            <h3>{title}</h3>\n'
            if img_path and os.path.exists(img_path):
                try:
                    # Embed image data directly using Base64
                    with open(img_path, "rb") as image_file:
                        encoded_string = base64.b64encode(image_file.read()).decode('utf-8')

                    # Determine image format for data URI
                    img_format = os.path.splitext(img_path)[1].lower().replace('.', '')
                    mime_type_map = {'png': 'image/png', 'jpg': 'image/jpeg', 'jpeg': 'image/jpeg', 'gif': 'image/gif', 'svg': 'image/svg+xml'}
                    mime_type = mime_type_map.get(img_format, 'application/octet-stream') # Fallback

                    html_content += f'            <img src="data:{mime_type};base64,{encoded_string}" alt="{title}">\n'
                    print(f"Successfully embedded plot: {title} ({os.path.basename(img_path)})")

                except FileNotFoundError:
                     html_content += f'            <p class="error">Error: Plot image file not found at <span class="code">{img_path}</span>.</p>\n'
                     print(f"Error: Plot image file not found: {img_path}")
                except Exception as e:
                    html_content += f'            <p class="error">Error loading or embedding image <span class="code">{os.path.basename(img_path)}</span>: {e}</p>\n'
                    print(f"Warning: Could not read or embed image {img_path}: {e}")
            elif img_path:
                 html_content += f'            <p class="error">Error: Plot image file not found at <span class="code">{img_path}</span>.</p>\n'
                 print(f"Error: Plot image file not found: {img_path}")
            else:
                 html_content += f'            <p class="warning">Path not provided for plot: "{title}".</p>\n'
                 print(f"Warning: Path not provided for plot: '{title}'")

            html_content += '        </div>\n' # Close plot-container

    # --- Footer ---
    html_content += f"""
        <div class="footer">
            FASTQ Analysis Report generated using custom Python tools.
        </div>
    </div> </body>
</html>
"""

    # --- Write HTML file ---
    try:
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        print(f"Successfully generated HTML report: {os.path.abspath(output_filename)}")
        return os.path.abspath(output_filename)
    except IOError as e:
        print(f"Error writing HTML report file '{output_filename}': {e}")
    except Exception as e:
        print(f"An unexpected error occurred during report writing: {e}")
    return None

# --- Example Usage (for independent testing) ---
if __name__ == "__main__":
    print("--- Running Example Usage of report_generator.py ---")

    # Create dummy data similar to what might come from other modules

    # 1. Sample Summary Statistics (flattened dictionary)
    sample_stats = {
        "FASTQ File": "sample.fastq.gz",
        "Total Reads": 10000,
        "Total Bases": 1450000,
        "Min Read Length": 75,
        "Max Read Length": 151,
        "Average Read Length": 145.00,
        "% GC Overall": 48.23,
        "% N Content": 0.05,
        "Duplication Rate (%)": 15.67,
        "Reads Sampled for Duplication": 10000, # Example if sampling is used
        "Unique Sequences Found": 8433,
    }

    # Create a DataFrame version for testing that path
    sample_stats_df = pd.DataFrame.from_dict(sample_stats, orient='index', columns=['Value'])

    # 2. Sample Plot Paths (requires dummy files to exist)
    # IMPORTANT: In a real workflow, visualizer.py would create these files.
    output_plot_dir = "example_analysis_plots"
    os.makedirs(output_plot_dir, exist_ok=True)

    # Create dummy plot files (just need the files to exist for the example)
    dummy_plot_files = {
        "Per Base Sequence Quality": os.path.join(output_plot_dir, "per_base_quality.png"),
        "Per Sequence Quality Scores": os.path.join(output_plot_dir, "per_sequence_quality.png"),
        "Sequence Length Distribution": os.path.join(output_plot_dir, "length_distribution.png"),
        "Per Base N Content": os.path.join(output_plot_dir, "n_content.png"),
        "Adapter Content": os.path.join(output_plot_dir, "adapter_content.png"), # Example plot
    }

    print(f"Creating dummy plot files in '{output_plot_dir}' for example...")
    for title, plot_path in dummy_plot_files.items():
         try:
             # Create tiny placeholder PNG (replace with actual plot generation)
             # Using matplotlib to create a minimal valid PNG file for the example
             import matplotlib.pyplot as plt
             fig, ax = plt.subplots(figsize=(2, 1))
             ax.text(0.5, 0.5, f'Placeholder:\n{title}', ha='center', va='center', fontsize=8)
             ax.axis('off')
             plt.savefig(plot_path, bbox_inches='tight', dpi=50)
             plt.close(fig)
             print(f"  - Created dummy plot: {plot_path}")
         except Exception as e:
             print(f"  - Failed to create dummy plot {plot_path}: {e} (Continuing...)")


    # Add a path that will intentionally not exist for testing error handling
    dummy_plot_files["Missing Plot Example"] = os.path.join(output_plot_dir, "definitely_missing.png")

    # 3. Generate the report using the dictionary stats
    print("\nGenerating report using Dictionary stats...")
    report_path_dict = generate_html_report(
        summary_stats=sample_stats,
        plot_paths=dummy_plot_files,
        output_filename="example_report_from_dict.html"
    )
    if report_path_dict:
        print(f"View report at: file://{report_path_dict}")

    # 4. Generate the report using the DataFrame stats
    print("\nGenerating report using DataFrame stats...")
    report_path_df = generate_html_report(
        summary_stats=sample_stats_df,
        plot_paths=dummy_plot_files,
        output_filename="example_report_from_df.html"
    )
    if report_path_df:
        print(f"View report at: file://{report_path_df}")

    print("\n--- Example Usage Finished ---")
    # Consider cleaning up dummy files/dirs if desired
    # import shutil
    # shutil.rmtree(output_plot_dir)
    # os.remove("example_report_from_dict.html")
    # os.remove("example_report_from_df.html")
